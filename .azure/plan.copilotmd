# Azure Deployment Plan for Customer Portal Project

## **Goal**
Deploy a comprehensive customer portal application to Azure using Azure Static Web Apps with integrated Azure Functions backend, Azure SQL Database, and Azure AD B2C authentication.

## **Project Information**
- **Application Name**: Customer Portal
- **Technology Stack**: React.js with TypeScript frontend, Azure Functions Node.js backend
- **Application Type**: Secure customer portal with admin capabilities for news, product catalog, and order management
- **Authentication**: Azure AD B2C with email/password authentication
- **Database**: Azure SQL Database for storing users, news, products, and order history
- **Storage**: Azure Blob Storage for product images and documents
- **Hosting**: Azure Static Web Apps with integrated Azure Functions

## **Azure Resources Architecture**
> **Install the mermaid extension in IDE to view the architecture.**

```mermaid
graph TB
    Users[Users] --> SWA[Azure Static Web Apps]
    SWA --> AAD[Azure AD B2C]
    SWA --> AF[Azure Functions]
    AF --> SQL[Azure SQL Database]
    AF --> Blob[Azure Blob Storage]
    
    Admin[Admin Users] --> SWA
    SWA --> AI[Application Insights]
    AF --> AI
    
    subgraph "Customer Portal Architecture"
        SWA
        AF
        SQL
        Blob
        AAD
        AI
    end
```

**Data Flow:**
- Users authenticate through Azure AD B2C integrated with Static Web Apps
- Frontend React app calls Azure Functions APIs through `/api/*` routes
- Azure Functions connect to Azure SQL Database for data operations
- Product images are served from Azure Blob Storage
- All telemetry flows to Application Insights for monitoring

## **Recommended Azure Resources**

**Application Hosting:**
- **Customer Portal Frontend**
  - Hosting Service Type: Azure Static Web Apps
  - SKU: Standard (for custom authentication and advanced routing)
  - Configuration:
    - Runtime: Node.js 18 LTS
    - Build: React.js with TypeScript
    - Output Location: `build/`
    - API Location: `api/`
    - Environment Variables: []

**Backend API:**
- **Customer Portal API**
  - Hosting Service Type: Azure Functions (integrated with Static Web Apps)
  - SKU: Consumption Plan (Y1)
  - Configuration:
    - Runtime: Node.js 18 LTS
    - Programming Model: Azure Functions v4
    - Environment Variables: 
      - `AZURE_SQL_CONNECTIONSTRING`
      - `AZURE_STORAGE_CONNECTION_STRING`

**Dependencies:**
- **Azure SQL Database**
  - SKU: Basic (DTU: 5) - suitable for development/testing
  - Service Type: Azure SQL Database
  - Connection Type: Connection string via environment variables
  - Environment Variables: `AZURE_SQL_CONNECTIONSTRING`

- **Azure Blob Storage**
  - SKU: Standard_LRS (General Purpose v2)
  - Service Type: Azure Storage Account
  - Connection Type: Connection string
  - Environment Variables: `AZURE_STORAGE_CONNECTION_STRING`

- **Azure AD B2C**
  - Service Type: Azure AD B2C tenant
  - Configuration: Email/password user flows
  - Integration: Built-in SWA authentication

**Supporting Services:**
- **Application Insights**: Monitor frontend and backend performance
- **Log Analytics Workspace**: Centralized logging for all services
- **Key Vault**: Store database connection strings and sensitive configuration

**Security Configurations:**
- Azure AD B2C user flows for registration and sign-in
- Role-based access control (Customer, Admin roles)
- Connection strings stored in Azure Key Vault
- HTTPS enforcement on all endpoints
- CORS configuration for API endpoints

## **Execution Steps**

1. **Provision Azure Infrastructure:**
   1. Create resource group for the customer portal
   2. Deploy Azure SQL Database with initial schema
   3. Create Azure Storage Account with blob containers
   4. Set up Azure AD B2C tenant and user flows
   5. Configure Application Insights and Log Analytics

2. **Build and Deploy Application:**
   1. Build React frontend application
   2. Deploy Azure Functions API
   3. Configure Azure Static Web Apps with GitHub Actions
   4. Set up authentication integration with Azure AD B2C

3. **Database Setup:**
   1. Run SQL scripts to create database schema
   2. Populate sample data for products and categories
   3. Configure database connection strings

4. **Validation:**
   1. Test authentication flows
   2. Verify API endpoints functionality
   3. Test frontend-backend integration
   4. Validate security configurations

5. **Summary:**
   1. Document all deployed resources
   2. Provide access URLs and configuration details
   3. Create monitoring dashboard links